#nullable enable
abstract Silk.NET.Windowing.Sdl.Android.SilkActivity.OnRun() -> void
const Org.Libsdl.App.BuildConfig.BuildType = "release" -> string!
const Org.Libsdl.App.BuildConfig.Debug = false -> bool
const Org.Libsdl.App.BuildConfig.LibraryPackageName = "org.libsdl.app" -> string!
const Org.Libsdl.App.SDLActivity.CommandUser = 32768 -> int
const Org.Libsdl.App.SDLActivity.SdlOrientationLandscape = 1 -> int
const Org.Libsdl.App.SDLActivity.SdlOrientationLandscapeFlipped = 2 -> int
const Org.Libsdl.App.SDLActivity.SdlOrientationPortrait = 3 -> int
const Org.Libsdl.App.SDLActivity.SdlOrientationPortraitFlipped = 4 -> int
const Org.Libsdl.App.SDLActivity.SdlOrientationUnknown = 0 -> int
const Org.Libsdl.App.SDLAudioManager.Tag = "SDLAudio" -> string!
const Silk.NET.Windowing.Sdl.Android.SilkActivity.ConfigChangesFlags = Android.Content.PM.ConfigChanges.KeyboardHidden | Android.Content.PM.ConfigChanges.Orientation | Android.Content.PM.ConfigChanges.ScreenSize -> Android.Content.PM.ConfigChanges
Org.Libsdl.App.BuildConfig
Org.Libsdl.App.BuildConfig.BuildConfig() -> void
Org.Libsdl.App.HIDDeviceManager
Org.Libsdl.App.HIDDeviceManager.HIDDeviceManager(System.IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Org.Libsdl.App.SDL
Org.Libsdl.App.SDL.SDL() -> void
Org.Libsdl.App.SDL.SDL(System.IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Org.Libsdl.App.SDLActivity
Org.Libsdl.App.SDLActivity.MessageboxSelection.get -> System.Collections.Generic.IList<int>?
Org.Libsdl.App.SDLActivity.MessageboxSelection.set -> void
Org.Libsdl.App.SDLActivity.NativeState
Org.Libsdl.App.SDLActivity.SDLActivity() -> void
Org.Libsdl.App.SDLActivity.SDLActivity(System.IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Org.Libsdl.App.SDLActivity.SDLCommandHandler
Org.Libsdl.App.SDLActivity.SDLCommandHandler.SDLCommandHandler() -> void
Org.Libsdl.App.SDLActivity.SDLCommandHandler.SDLCommandHandler(System.IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Org.Libsdl.App.SDLAudioManager
Org.Libsdl.App.SDLAudioManager.SDLAudioManager() -> void
Org.Libsdl.App.SDLAudioManager.SDLAudioManager(System.IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Org.Libsdl.App.SDLControllerManager
Org.Libsdl.App.SDLControllerManager.SDLControllerManager() -> void
Org.Libsdl.App.SDLControllerManager.SDLControllerManager(System.IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
override Org.Libsdl.App.BuildConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Org.Libsdl.App.HIDDeviceManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Org.Libsdl.App.HIDDeviceManager.ThresholdClass.get -> System.IntPtr
override Org.Libsdl.App.HIDDeviceManager.ThresholdType.get -> System.Type!
override Org.Libsdl.App.SDL.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Org.Libsdl.App.SDL.ThresholdClass.get -> System.IntPtr
override Org.Libsdl.App.SDL.ThresholdType.get -> System.Type!
override Org.Libsdl.App.SDLActivity.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Org.Libsdl.App.SDLActivity.NativeState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Org.Libsdl.App.SDLActivity.SDLCommandHandler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Org.Libsdl.App.SDLActivity.SDLCommandHandler.ThresholdClass.get -> System.IntPtr
override Org.Libsdl.App.SDLActivity.SDLCommandHandler.ThresholdType.get -> System.Type!
override Org.Libsdl.App.SDLActivity.ThresholdClass.get -> System.IntPtr
override Org.Libsdl.App.SDLActivity.ThresholdType.get -> System.Type!
override Org.Libsdl.App.SDLAudioManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Org.Libsdl.App.SDLAudioManager.ThresholdClass.get -> System.IntPtr
override Org.Libsdl.App.SDLAudioManager.ThresholdType.get -> System.Type!
override Org.Libsdl.App.SDLControllerManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Org.Libsdl.App.SDLControllerManager.ThresholdClass.get -> System.IntPtr
override Org.Libsdl.App.SDLControllerManager.ThresholdType.get -> System.Type!
override Silk.NET.Windowing.Sdl.Android.SilkActivity.LoadLibraries() -> void
override Silk.NET.Windowing.Sdl.Android.SilkActivity.SetOrientationBis(int w, int h, bool resizable, string! hint) -> void
Silk.NET.Windowing.Sdl.Android.SilkActivity
Silk.NET.Windowing.Sdl.Android.SilkActivity.SilkActivity() -> void
Silk.NET.Windowing.Sdl.Resource
Silk.NET.Windowing.Sdl.Resource.Attribute
Silk.NET.Windowing.Sdl.Resource.Resource() -> void
Silk.NET.Windowing.Sdl.SdlWindowing
static Org.Libsdl.App.HIDDeviceManager.Acquire(Android.Content.Context? context) -> Org.Libsdl.App.HIDDeviceManager?
static Org.Libsdl.App.HIDDeviceManager.Release(Org.Libsdl.App.HIDDeviceManager? manager) -> void
static Org.Libsdl.App.SDL.Context.get -> Android.Content.Context?
static Org.Libsdl.App.SDL.Context.set -> void
static Org.Libsdl.App.SDL.Initialize() -> void
static Org.Libsdl.App.SDL.LoadLibrary(string? libraryName) -> void
static Org.Libsdl.App.SDL.MContext.get -> Android.Content.Context?
static Org.Libsdl.App.SDL.MContext.set -> void
static Org.Libsdl.App.SDL.SetupJNI() -> void
static Org.Libsdl.App.SDLActivity.ClipboardGetText() -> string?
static Org.Libsdl.App.SDLActivity.ClipboardHasText() -> bool
static Org.Libsdl.App.SDLActivity.ClipboardSetText(string? string) -> void
static Org.Libsdl.App.SDLActivity.ContentView.get -> Android.Views.View?
static Org.Libsdl.App.SDLActivity.Context.get -> Android.Content.Context?
static Org.Libsdl.App.SDLActivity.CreateCustomCursor(int[]? colors, int width, int height, int hotSpotX, int hotSpotY) -> int
static Org.Libsdl.App.SDLActivity.CurrentOrientation.get -> int
static Org.Libsdl.App.SDLActivity.Diagonal.get -> double
static Org.Libsdl.App.SDLActivity.DisplayDPI.get -> Android.Util.DisplayMetrics?
static Org.Libsdl.App.SDLActivity.HandleNativeState() -> void
static Org.Libsdl.App.SDLActivity.Initialize() -> void
static Org.Libsdl.App.SDLActivity.InitTouch() -> void
static Org.Libsdl.App.SDLActivity.IsAndroidTV.get -> bool
static Org.Libsdl.App.SDLActivity.IsChromebook.get -> bool
static Org.Libsdl.App.SDLActivity.IsDeXMode.get -> bool
static Org.Libsdl.App.SDLActivity.IsScreenKeyboardShown.get -> bool
static Org.Libsdl.App.SDLActivity.IsTablet.get -> bool
static Org.Libsdl.App.SDLActivity.IsTextInputEvent(Android.Views.KeyEvent? e) -> bool
static Org.Libsdl.App.SDLActivity.ManifestEnvironmentVariables.get -> bool
static Org.Libsdl.App.SDLActivity.ManualBackButton() -> void
static Org.Libsdl.App.SDLActivity.MBrokenLibraries.get -> bool
static Org.Libsdl.App.SDLActivity.MBrokenLibraries.set -> void
static Org.Libsdl.App.SDLActivity.MCurrentLocale.get -> Java.Util.Locale?
static Org.Libsdl.App.SDLActivity.MCurrentLocale.set -> void
static Org.Libsdl.App.SDLActivity.MCurrentNativeState.get -> Org.Libsdl.App.SDLActivity.NativeState?
static Org.Libsdl.App.SDLActivity.MCurrentNativeState.set -> void
static Org.Libsdl.App.SDLActivity.MCurrentOrientation.get -> int
static Org.Libsdl.App.SDLActivity.MCurrentOrientation.set -> void
static Org.Libsdl.App.SDLActivity.MCursors.get -> Java.Util.Hashtable?
static Org.Libsdl.App.SDLActivity.MCursors.set -> void
static Org.Libsdl.App.SDLActivity.MFullscreenModeActive.get -> bool
static Org.Libsdl.App.SDLActivity.MFullscreenModeActive.set -> void
static Org.Libsdl.App.SDLActivity.MHasFocus.get -> bool
static Org.Libsdl.App.SDLActivity.MHasFocus.set -> void
static Org.Libsdl.App.SDLActivity.MHasMultiWindow.get -> bool
static Org.Libsdl.App.SDLActivity.MHIDDeviceManager.get -> Org.Libsdl.App.HIDDeviceManager?
static Org.Libsdl.App.SDLActivity.MHIDDeviceManager.set -> void
static Org.Libsdl.App.SDLActivity.MinimizeWindow() -> void
static Org.Libsdl.App.SDLActivity.MIsResumedCalled.get -> bool
static Org.Libsdl.App.SDLActivity.MIsResumedCalled.set -> void
static Org.Libsdl.App.SDLActivity.MLastCursorID.get -> int
static Org.Libsdl.App.SDLActivity.MLastCursorID.set -> void
static Org.Libsdl.App.SDLActivity.MLayout.get -> Android.Views.ViewGroup?
static Org.Libsdl.App.SDLActivity.MLayout.set -> void
static Org.Libsdl.App.SDLActivity.MNextNativeState.get -> Org.Libsdl.App.SDLActivity.NativeState?
static Org.Libsdl.App.SDLActivity.MNextNativeState.set -> void
static Org.Libsdl.App.SDLActivity.MScreenKeyboardShown.get -> bool
static Org.Libsdl.App.SDLActivity.MScreenKeyboardShown.set -> void
static Org.Libsdl.App.SDLActivity.MSDLThread.get -> Java.Lang.Thread?
static Org.Libsdl.App.SDLActivity.MSDLThread.set -> void
static Org.Libsdl.App.SDLActivity.MSingleton.get -> Org.Libsdl.App.SDLActivity?
static Org.Libsdl.App.SDLActivity.MSingleton.set -> void
static Org.Libsdl.App.SDLActivity.MTextEdit.get -> Android.Views.View?
static Org.Libsdl.App.SDLActivity.MTextEdit.set -> void
static Org.Libsdl.App.SDLActivity.NativeAddTouch(int p0, string? p1) -> void
static Org.Libsdl.App.SDLActivity.NativeFocusChanged(bool p0) -> void
static Org.Libsdl.App.SDLActivity.NativeGetHint(string? p0) -> string?
static Org.Libsdl.App.SDLActivity.NativeGetHintBoolean(string? p0, bool) -> bool
static Org.Libsdl.App.SDLActivity.NativeGetVersion() -> string?
static Org.Libsdl.App.SDLActivity.NativeLowMemory() -> void
static Org.Libsdl.App.SDLActivity.NativePause() -> void
static Org.Libsdl.App.SDLActivity.NativePermissionResult(int p0, bool p1) -> void
static Org.Libsdl.App.SDLActivity.NativeQuit() -> void
static Org.Libsdl.App.SDLActivity.NativeResume() -> void
static Org.Libsdl.App.SDLActivity.NativeRunMain(string? p0, string? p1, Java.Lang.Object? p2) -> int
static Org.Libsdl.App.SDLActivity.NativeSendQuit() -> void
static Org.Libsdl.App.SDLActivity.NativeSetenv(string? p0, string? p1) -> void
static Org.Libsdl.App.SDLActivity.NativeSetScreenResolution(int p0, int p1, int p2, int p3, float p4) -> void
static Org.Libsdl.App.SDLActivity.NativeSetupJNI() -> int
static Org.Libsdl.App.SDLActivity.NativeState.Init.get -> Org.Libsdl.App.SDLActivity.NativeState?
static Org.Libsdl.App.SDLActivity.NativeState.Paused.get -> Org.Libsdl.App.SDLActivity.NativeState?
static Org.Libsdl.App.SDLActivity.NativeState.Resumed.get -> Org.Libsdl.App.SDLActivity.NativeState?
static Org.Libsdl.App.SDLActivity.NativeState.ValueOf(string? name) -> Org.Libsdl.App.SDLActivity.NativeState?
static Org.Libsdl.App.SDLActivity.NativeState.Values() -> Org.Libsdl.App.SDLActivity.NativeState![]?
static Org.Libsdl.App.SDLActivity.NativeSurface.get -> Android.Views.Surface?
static Org.Libsdl.App.SDLActivity.OnNativeAccel(float p0, float p1, float p2) -> void
static Org.Libsdl.App.SDLActivity.OnNativeClipboardChanged() -> void
static Org.Libsdl.App.SDLActivity.OnNativeDropFile(string? p0) -> void
static Org.Libsdl.App.SDLActivity.OnNativeKeyboardFocusLost() -> void
static Org.Libsdl.App.SDLActivity.OnNativeKeyDown(int p0) -> void
static Org.Libsdl.App.SDLActivity.OnNativeKeyUp(int p0) -> void
static Org.Libsdl.App.SDLActivity.OnNativeLocaleChanged() -> void
static Org.Libsdl.App.SDLActivity.OnNativeMouse(int p0, int p1, float p2, float p3, bool p4) -> void
static Org.Libsdl.App.SDLActivity.OnNativeOrientationChanged(int p0) -> void
static Org.Libsdl.App.SDLActivity.OnNativeResize() -> void
static Org.Libsdl.App.SDLActivity.OnNativeSoftReturnKey() -> bool
static Org.Libsdl.App.SDLActivity.OnNativeSurfaceChanged() -> void
static Org.Libsdl.App.SDLActivity.OnNativeSurfaceCreated() -> void
static Org.Libsdl.App.SDLActivity.OnNativeSurfaceDestroyed() -> void
static Org.Libsdl.App.SDLActivity.OnNativeTouch(int p0, int p1, int p2, float p3, float p4, float p5) -> void
static Org.Libsdl.App.SDLActivity.OpenURL(string? url) -> int
static Org.Libsdl.App.SDLActivity.RequestPermission(string? permission, int requestCode) -> void
static Org.Libsdl.App.SDLActivity.SendMessage(int command, int param) -> bool
static Org.Libsdl.App.SDLActivity.SetActivityTitle(string? title) -> bool
static Org.Libsdl.App.SDLActivity.DestroyCustomCursor(int cursorID) -> bool
static Org.Libsdl.App.SDLActivity.SetCustomCursor(int cursorID) -> bool
static Org.Libsdl.App.SDLActivity.SetOrientation(int w, int h, bool resizable, string? hint) -> void
static Org.Libsdl.App.SDLActivity.SetRelativeMouseEnabled(bool enabled) -> bool
static Org.Libsdl.App.SDLActivity.SetSurfaceViewFormat(int format) -> void
static Org.Libsdl.App.SDLActivity.SetSystemCursor(int cursorID) -> bool
static Org.Libsdl.App.SDLActivity.SetWindowStyle(bool fullscreen) -> void
static Org.Libsdl.App.SDLActivity.ShouldMinimizeOnFocusLoss() -> bool
static Org.Libsdl.App.SDLActivity.ShowTextInput(int x, int y, int w, int h) -> bool
static Org.Libsdl.App.SDLActivity.ShowToast(string? message, int duration, int gravity, int xOffset, int yOffset) -> int
static Org.Libsdl.App.SDLActivity.SupportsRelativeMouse() -> bool
static Org.Libsdl.App.SDLAudioManager.AudioClose() -> void
static Org.Libsdl.App.SDLAudioManager.AudioOpen(int sampleRate, int audioFormat, int desiredChannels, int desiredFrames) -> int[]?
static Org.Libsdl.App.SDLAudioManager.AudioSetThreadPriority(bool iscapture, int device_id) -> void
static Org.Libsdl.App.SDLAudioManager.AudioWriteByteBuffer(byte[]? buffer) -> void
static Org.Libsdl.App.SDLAudioManager.AudioWriteFloatBuffer(float[]? buffer) -> void
static Org.Libsdl.App.SDLAudioManager.AudioWriteShortBuffer(short[]? buffer) -> void
static Org.Libsdl.App.SDLAudioManager.CaptureClose() -> void
static Org.Libsdl.App.SDLAudioManager.CaptureOpen(int sampleRate, int audioFormat, int desiredChannels, int desiredFrames) -> int[]?
static Org.Libsdl.App.SDLAudioManager.CaptureReadByteBuffer(byte[]? buffer, bool blocking) -> int
static Org.Libsdl.App.SDLAudioManager.CaptureReadFloatBuffer(float[]? buffer, bool blocking) -> int
static Org.Libsdl.App.SDLAudioManager.CaptureReadShortBuffer(short[]? buffer, bool blocking) -> int
static Org.Libsdl.App.SDLAudioManager.GetAudioFormatString(int audioFormat) -> string?
static Org.Libsdl.App.SDLAudioManager.Initialize() -> void
static Org.Libsdl.App.SDLAudioManager.MAudioRecord.get -> Android.Media.AudioRecord?
static Org.Libsdl.App.SDLAudioManager.MAudioRecord.set -> void
static Org.Libsdl.App.SDLAudioManager.MAudioTrack.get -> Android.Media.AudioTrack?
static Org.Libsdl.App.SDLAudioManager.MAudioTrack.set -> void
static Org.Libsdl.App.SDLAudioManager.NativeSetupJNI() -> int
static Org.Libsdl.App.SDLAudioManager.Open(bool isCapture, int sampleRate, int audioFormat, int desiredChannels, int desiredFrames) -> int[]?
static Org.Libsdl.App.SDLControllerManager.HandleJoystickMotionEvent(Android.Views.MotionEvent? e) -> bool
static Org.Libsdl.App.SDLControllerManager.HapticRun(int device_id, float intensity, int length) -> void
static Org.Libsdl.App.SDLControllerManager.HapticStop(int device_id) -> void
static Org.Libsdl.App.SDLControllerManager.Initialize() -> void
static Org.Libsdl.App.SDLControllerManager.IsDeviceSDLJoystick(int deviceId) -> bool
static Org.Libsdl.App.SDLControllerManager.NativeAddHaptic(int p0, string? p1) -> int
static Org.Libsdl.App.SDLControllerManager.NativeAddJoystick(int p0, string? p1, string? p2, int p3, int p4, bool p5, int p6, int p7, int p8, int p9) -> int
static Org.Libsdl.App.SDLControllerManager.NativeRemoveHaptic(int p0) -> int
static Org.Libsdl.App.SDLControllerManager.NativeRemoveJoystick(int p0) -> int
static Org.Libsdl.App.SDLControllerManager.NativeSetupJNI() -> int
static Org.Libsdl.App.SDLControllerManager.OnNativeHat(int p0, int p1, int p2, int p3) -> void
static Org.Libsdl.App.SDLControllerManager.OnNativeJoy(int p0, int p1, float p2) -> void
static Org.Libsdl.App.SDLControllerManager.OnNativePadDown(int p0, int p1) -> int
static Org.Libsdl.App.SDLControllerManager.OnNativePadUp(int p0, int p1) -> int
static Org.Libsdl.App.SDLControllerManager.PollHapticDevices() -> void
static Org.Libsdl.App.SDLControllerManager.PollInputDevices() -> void
static Silk.NET.Windowing.Sdl.SdlWindowing.CreateFrom(void* handle, Silk.NET.Core.Contexts.IGLContext? ctx = null) -> Silk.NET.Windowing.IView!
static Silk.NET.Windowing.Sdl.SdlWindowing.GetExistingApi(Silk.NET.Windowing.IView! view) -> Silk.NET.SDL.Sdl?
static Silk.NET.Windowing.Sdl.SdlWindowing.GetHandle(Silk.NET.Windowing.IView! view) -> Silk.NET.SDL.Window*
static Silk.NET.Windowing.Sdl.SdlWindowing.GetSysWMInfo(Silk.NET.Windowing.IView! view) -> Silk.NET.SDL.SysWMInfo?
static Silk.NET.Windowing.Sdl.SdlWindowing.IsViewSdl(Silk.NET.Windowing.IView! view) -> bool
static Silk.NET.Windowing.Sdl.SdlWindowing.RegisterPlatform() -> void
static Silk.NET.Windowing.Sdl.SdlWindowing.Use() -> void
virtual Org.Libsdl.App.HIDDeviceManager.ChromebookConnectionHandler() -> void
virtual Org.Libsdl.App.HIDDeviceManager.CloseDevice(int deviceID) -> void
virtual Org.Libsdl.App.HIDDeviceManager.ConnectBluetoothDevice(Android.Bluetooth.BluetoothDevice? bluetoothDevice) -> bool
virtual Org.Libsdl.App.HIDDeviceManager.Context.get -> Android.Content.Context?
virtual Org.Libsdl.App.HIDDeviceManager.DisconnectBluetoothDevice(Android.Bluetooth.BluetoothDevice? bluetoothDevice) -> void
virtual Org.Libsdl.App.HIDDeviceManager.GetDeviceIDForIdentifier(string? identifier) -> int
virtual Org.Libsdl.App.HIDDeviceManager.GetFeatureReport(int deviceID, byte[]? report) -> bool
virtual Org.Libsdl.App.HIDDeviceManager.IsSteamController(Android.Bluetooth.BluetoothDevice? bluetoothDevice) -> bool
virtual Org.Libsdl.App.HIDDeviceManager.OpenDevice(int deviceID) -> bool
virtual Org.Libsdl.App.HIDDeviceManager.SendFeatureReport(int deviceID, byte[]? report) -> int
virtual Org.Libsdl.App.HIDDeviceManager.SendOutputReport(int deviceID, byte[]? report) -> int
virtual Org.Libsdl.App.HIDDeviceManager.SetFrozen(bool frozen) -> void
virtual Org.Libsdl.App.SDLActivity.GetArguments() -> string![]?
virtual Org.Libsdl.App.SDLActivity.GetLibraries() -> string![]?
virtual Org.Libsdl.App.SDLActivity.LoadLibraries() -> void
virtual Org.Libsdl.App.SDLActivity.MainFunction.get -> string?
virtual Org.Libsdl.App.SDLActivity.MainSharedObject.get -> string?
virtual Org.Libsdl.App.SDLActivity.MessageboxCreateAndShow(Android.OS.Bundle? args) -> void
virtual Org.Libsdl.App.SDLActivity.MessageboxShowMessageBox(int flags, string? title, string? message, int[]? buttonFlags, int[]? buttonIds, string![]? buttonTexts, int[]? colors) -> int
virtual Org.Libsdl.App.SDLActivity.OnSystemUiVisibilityChange(Android.Views.StatusBarVisibility visibility) -> void
virtual Org.Libsdl.App.SDLActivity.OnUnhandledMessage(int command, Java.Lang.Object? param) -> bool
virtual Org.Libsdl.App.SDLActivity.PauseNativeThread() -> void
virtual Org.Libsdl.App.SDLActivity.PressBackButton() -> void
virtual Org.Libsdl.App.SDLActivity.ResumeNativeThread() -> void
virtual Org.Libsdl.App.SDLActivity.SetOrientationBis(int w, int h, bool resizable, string? hint) -> void
virtual Org.Libsdl.App.SDLActivity.SuperOnBackPressed() -> void
override Silk.NET.Windowing.Sdl.Android.SilkActivity.OnDestroy() -> void
